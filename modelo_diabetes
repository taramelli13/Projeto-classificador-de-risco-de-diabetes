import pandas as pd
import numpy as np
import joblib
from sklearn.impute import KNNImputer
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, roc_auc_score

# 1. Carregar o dataset
# Ajuste o caminho para o seu arquivo
df = pd.read_csv('diabetes.csv')

# 2. Substituir zeros inválidos por NaN
cols_zero = ['Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI']
df[cols_zero] = df[cols_zero].replace(0, np.nan)

# 3. Imputação com mediana para colunas com poucos nulos
for col in ['Glucose', 'BloodPressure', 'BMI']:
    df[col] = df[col].fillna(df[col].median())

# 4. Imputação com KNN para SkinThickness e Insulin
imputer = KNNImputer(n_neighbors=5)
df_imputed = pd.DataFrame(imputer.fit_transform(df), columns=df.columns)

# 5. Preparar os dados para treino
X = df_imputed.drop('Outcome', axis=1)
y = df_imputed['Outcome']

# 6. Dividir em treino e teste
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, stratify=y, random_state=42
)

# 7. Treinar o modelo
rf = RandomForestClassifier(random_state=42)
rf.fit(X_train, y_train)

# 8. Avaliar performance
y_pred = rf.predict(X_test)
y_proba = rf.predict_proba(X_test)[:, 1]
print("Classification Report:\n", classification_report(y_test, y_pred))
print("AUC: ", roc_auc_score(y_test, y_proba))

# 9. Salvar o modelo treinado
joblib.dump(rf, 'modelo_diabetes.joblib')

print("Modelo salvo em 'modelo_diabetes.joblib'")

